use crate::bencode::{Token, Bencode, BencError};

grammar<'input>(input: &'input str);

pub Benc: Bencode<'input> = {
    "i" <("-")?> <Num> "e" =>? Bencode::decode_num(<>),
    Str                    =>  Bencode::Str(<>),
    "l" <Benc*> "e"        =>  Bencode::List(<>),
    "d" <(Str Benc)*> "e"  =>? Bencode::decode_dict(<>),
}

extern {
    type Location = usize;
    type Error = BencError;

    enum Token<'input> {
        "i" => Token::I,
        "l" => Token::L,
        "d" => Token::D,
        "e" => Token::E,
        ":" => Token::Colon,
        "-" => Token::Minus,
        Num => Token::Num(<i64>),
        Str => Token::Str((i32, <&'input str>)),
    }
}
